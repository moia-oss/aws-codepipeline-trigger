import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, limitedParseDouble as __limitedParseDouble, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, throwDefaultError, } from "@aws-sdk/smithy-client";
import { CodeBuildServiceException as __BaseException } from "../models/CodeBuildServiceException";
import { AccountLimitExceededException, InvalidInputException, OAuthProviderException, ResourceAlreadyExistsException, ResourceNotFoundException, } from "../models/models_0";
export const serializeAws_json1_1BatchDeleteBuildsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.BatchDeleteBuilds",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchDeleteBuildsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1BatchGetBuildBatchesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.BatchGetBuildBatches",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetBuildBatchesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1BatchGetBuildsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.BatchGetBuilds",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetBuildsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1BatchGetProjectsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.BatchGetProjects",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetProjectsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1BatchGetReportGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.BatchGetReportGroups",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetReportGroupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1BatchGetReportsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.BatchGetReports",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1BatchGetReportsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.CreateProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateProjectInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateReportGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.CreateReportGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateReportGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1CreateWebhookCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.CreateWebhook",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateWebhookInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteBuildBatchCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.DeleteBuildBatch",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteBuildBatchInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.DeleteProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteProjectInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteReportCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.DeleteReport",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteReportInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteReportGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.DeleteReportGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteReportGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteResourcePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.DeleteResourcePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteResourcePolicyInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteSourceCredentialsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.DeleteSourceCredentials",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteSourceCredentialsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DeleteWebhookCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.DeleteWebhook",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteWebhookInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeCodeCoveragesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.DescribeCodeCoverages",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeCodeCoveragesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1DescribeTestCasesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.DescribeTestCases",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeTestCasesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetReportGroupTrendCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.GetReportGroupTrend",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetReportGroupTrendInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1GetResourcePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.GetResourcePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetResourcePolicyInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ImportSourceCredentialsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ImportSourceCredentials",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ImportSourceCredentialsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1InvalidateProjectCacheCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.InvalidateProjectCache",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1InvalidateProjectCacheInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListBuildBatchesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListBuildBatches",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListBuildBatchesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListBuildBatchesForProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListBuildBatchesForProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListBuildBatchesForProjectInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListBuildsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListBuilds",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListBuildsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListBuildsForProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListBuildsForProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListBuildsForProjectInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListCuratedEnvironmentImagesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListCuratedEnvironmentImages",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListCuratedEnvironmentImagesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListProjectsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListProjects",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListProjectsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListReportGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListReportGroups",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListReportGroupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListReportsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListReports",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListReportsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListReportsForReportGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListReportsForReportGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListReportsForReportGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListSharedProjectsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListSharedProjects",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListSharedProjectsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListSharedReportGroupsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListSharedReportGroups",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListSharedReportGroupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1ListSourceCredentialsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.ListSourceCredentials",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListSourceCredentialsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1PutResourcePolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.PutResourcePolicy",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1PutResourcePolicyInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1RetryBuildCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.RetryBuild",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RetryBuildInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1RetryBuildBatchCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.RetryBuildBatch",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1RetryBuildBatchInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartBuildCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.StartBuild",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartBuildInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StartBuildBatchCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.StartBuildBatch",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StartBuildBatchInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopBuildCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.StopBuild",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopBuildInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1StopBuildBatchCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.StopBuildBatch",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1StopBuildBatchInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateProjectCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.UpdateProject",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateProjectInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateProjectVisibilityCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.UpdateProjectVisibility",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateProjectVisibilityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateReportGroupCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.UpdateReportGroup",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateReportGroupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_json1_1UpdateWebhookCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "CodeBuild_20161006.UpdateWebhook",
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UpdateWebhookInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const deserializeAws_json1_1BatchDeleteBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchDeleteBuildsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchDeleteBuildsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchDeleteBuildsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1BatchGetBuildBatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetBuildBatchesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetBuildBatchesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchGetBuildBatchesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1BatchGetBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetBuildsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetBuildsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchGetBuildsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1BatchGetProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetProjectsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchGetProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1BatchGetReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetReportGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetReportGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchGetReportGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1BatchGetReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1BatchGetReportsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1BatchGetReportsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1BatchGetReportsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await deserializeAws_json1_1AccountLimitExceededExceptionResponse(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateReportGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateReportGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateReportGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await deserializeAws_json1_1AccountLimitExceededExceptionResponse(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1CreateWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1CreateWebhookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1CreateWebhookOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateWebhookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "OAuthProviderException":
        case "com.amazonaws.codebuild#OAuthProviderException":
            throw await deserializeAws_json1_1OAuthProviderExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteBuildBatchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteBuildBatchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteReportCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteReportOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteReportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteReportGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteReportGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteReportGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteResourcePolicyOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteSourceCredentialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteSourceCredentialsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteSourceCredentialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DeleteWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DeleteWebhookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteWebhookOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteWebhookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "OAuthProviderException":
        case "com.amazonaws.codebuild#OAuthProviderException":
            throw await deserializeAws_json1_1OAuthProviderExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeCodeCoveragesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeCodeCoveragesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeCodeCoveragesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeCodeCoveragesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1DescribeTestCasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1DescribeTestCasesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DescribeTestCasesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeTestCasesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetReportGroupTrendCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetReportGroupTrendCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetReportGroupTrendOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetReportGroupTrendCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1GetResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1GetResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetResourcePolicyOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ImportSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ImportSourceCredentialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ImportSourceCredentialsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ImportSourceCredentialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await deserializeAws_json1_1AccountLimitExceededExceptionResponse(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceAlreadyExistsException":
        case "com.amazonaws.codebuild#ResourceAlreadyExistsException":
            throw await deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1InvalidateProjectCacheCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1InvalidateProjectCacheCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1InvalidateProjectCacheOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1InvalidateProjectCacheCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListBuildBatchesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListBuildBatchesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListBuildBatchesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListBuildBatchesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListBuildBatchesForProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListBuildBatchesForProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListBuildBatchesForProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListBuildBatchesForProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListBuildsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListBuildsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListBuildsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListBuildsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListBuildsForProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListBuildsForProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListBuildsForProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListBuildsForProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListCuratedEnvironmentImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListCuratedEnvironmentImagesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListCuratedEnvironmentImagesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListCuratedEnvironmentImagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_json1_1ListProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListProjectsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListReportGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListReportGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListReportGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListReportsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListReportsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListReportsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListReportsForReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListReportsForReportGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListReportsForReportGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListReportsForReportGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListSharedProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSharedProjectsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListSharedProjectsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListSharedProjectsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListSharedReportGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSharedReportGroupsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListSharedReportGroupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListSharedReportGroupsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1ListSourceCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1ListSourceCredentialsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListSourceCredentialsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListSourceCredentialsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1PutResourcePolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1PutResourcePolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1PutResourcePolicyOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1PutResourcePolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1RetryBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RetryBuildCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1RetryBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1RetryBuildCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await deserializeAws_json1_1AccountLimitExceededExceptionResponse(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1RetryBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1RetryBuildBatchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1RetryBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1RetryBuildBatchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartBuildCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartBuildCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AccountLimitExceededException":
        case "com.amazonaws.codebuild#AccountLimitExceededException":
            throw await deserializeAws_json1_1AccountLimitExceededExceptionResponse(parsedOutput, context);
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StartBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StartBuildBatchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StartBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StartBuildBatchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopBuildCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopBuildCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopBuildOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopBuildCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1StopBuildBatchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1StopBuildBatchCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1StopBuildBatchOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1StopBuildBatchCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateProjectCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateProjectOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateProjectCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateProjectVisibilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateProjectVisibilityCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateProjectVisibilityOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateProjectVisibilityCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateReportGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateReportGroupCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateReportGroupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateReportGroupCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_json1_1UpdateWebhookCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_json1_1UpdateWebhookCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UpdateWebhookOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateWebhookCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidInputException":
        case "com.amazonaws.codebuild#InvalidInputException":
            throw await deserializeAws_json1_1InvalidInputExceptionResponse(parsedOutput, context);
        case "OAuthProviderException":
        case "com.amazonaws.codebuild#OAuthProviderException":
            throw await deserializeAws_json1_1OAuthProviderExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.codebuild#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
const deserializeAws_json1_1AccountLimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1AccountLimitExceededException(body, context);
    const exception = new AccountLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1InvalidInputExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidInputException(body, context);
    const exception = new InvalidInputException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1OAuthProviderExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1OAuthProviderException(body, context);
    const exception = new OAuthProviderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceAlreadyExistsException(body, context);
    const exception = new ResourceAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const serializeAws_json1_1BatchDeleteBuildsInput = (input, context) => {
    return {
        ...(input.ids != null && { ids: serializeAws_json1_1BuildIds(input.ids, context) }),
    };
};
const serializeAws_json1_1BatchGetBuildBatchesInput = (input, context) => {
    return {
        ...(input.ids != null && { ids: serializeAws_json1_1BuildBatchIds(input.ids, context) }),
    };
};
const serializeAws_json1_1BatchGetBuildsInput = (input, context) => {
    return {
        ...(input.ids != null && { ids: serializeAws_json1_1BuildIds(input.ids, context) }),
    };
};
const serializeAws_json1_1BatchGetProjectsInput = (input, context) => {
    return {
        ...(input.names != null && { names: serializeAws_json1_1ProjectNames(input.names, context) }),
    };
};
const serializeAws_json1_1BatchGetReportGroupsInput = (input, context) => {
    return {
        ...(input.reportGroupArns != null && {
            reportGroupArns: serializeAws_json1_1ReportGroupArns(input.reportGroupArns, context),
        }),
    };
};
const serializeAws_json1_1BatchGetReportsInput = (input, context) => {
    return {
        ...(input.reportArns != null && { reportArns: serializeAws_json1_1ReportArns(input.reportArns, context) }),
    };
};
const serializeAws_json1_1BatchRestrictions = (input, context) => {
    return {
        ...(input.computeTypesAllowed != null && {
            computeTypesAllowed: serializeAws_json1_1ComputeTypesAllowed(input.computeTypesAllowed, context),
        }),
        ...(input.maximumBuildsAllowed != null && { maximumBuildsAllowed: input.maximumBuildsAllowed }),
    };
};
const serializeAws_json1_1BuildBatchFilter = (input, context) => {
    return {
        ...(input.status != null && { status: input.status }),
    };
};
const serializeAws_json1_1BuildBatchIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1BuildIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1BuildStatusConfig = (input, context) => {
    return {
        ...(input.context != null && { context: input.context }),
        ...(input.targetUrl != null && { targetUrl: input.targetUrl }),
    };
};
const serializeAws_json1_1CloudWatchLogsConfig = (input, context) => {
    return {
        ...(input.groupName != null && { groupName: input.groupName }),
        ...(input.status != null && { status: input.status }),
        ...(input.streamName != null && { streamName: input.streamName }),
    };
};
const serializeAws_json1_1ComputeTypesAllowed = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1CreateProjectInput = (input, context) => {
    return {
        ...(input.artifacts != null && { artifacts: serializeAws_json1_1ProjectArtifacts(input.artifacts, context) }),
        ...(input.badgeEnabled != null && { badgeEnabled: input.badgeEnabled }),
        ...(input.buildBatchConfig != null && {
            buildBatchConfig: serializeAws_json1_1ProjectBuildBatchConfig(input.buildBatchConfig, context),
        }),
        ...(input.cache != null && { cache: serializeAws_json1_1ProjectCache(input.cache, context) }),
        ...(input.concurrentBuildLimit != null && { concurrentBuildLimit: input.concurrentBuildLimit }),
        ...(input.description != null && { description: input.description }),
        ...(input.encryptionKey != null && { encryptionKey: input.encryptionKey }),
        ...(input.environment != null && {
            environment: serializeAws_json1_1ProjectEnvironment(input.environment, context),
        }),
        ...(input.fileSystemLocations != null && {
            fileSystemLocations: serializeAws_json1_1ProjectFileSystemLocations(input.fileSystemLocations, context),
        }),
        ...(input.logsConfig != null && { logsConfig: serializeAws_json1_1LogsConfig(input.logsConfig, context) }),
        ...(input.name != null && { name: input.name }),
        ...(input.queuedTimeoutInMinutes != null && { queuedTimeoutInMinutes: input.queuedTimeoutInMinutes }),
        ...(input.secondaryArtifacts != null && {
            secondaryArtifacts: serializeAws_json1_1ProjectArtifactsList(input.secondaryArtifacts, context),
        }),
        ...(input.secondarySourceVersions != null && {
            secondarySourceVersions: serializeAws_json1_1ProjectSecondarySourceVersions(input.secondarySourceVersions, context),
        }),
        ...(input.secondarySources != null && {
            secondarySources: serializeAws_json1_1ProjectSources(input.secondarySources, context),
        }),
        ...(input.serviceRole != null && { serviceRole: input.serviceRole }),
        ...(input.source != null && { source: serializeAws_json1_1ProjectSource(input.source, context) }),
        ...(input.sourceVersion != null && { sourceVersion: input.sourceVersion }),
        ...(input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }),
        ...(input.timeoutInMinutes != null && { timeoutInMinutes: input.timeoutInMinutes }),
        ...(input.vpcConfig != null && { vpcConfig: serializeAws_json1_1VpcConfig(input.vpcConfig, context) }),
    };
};
const serializeAws_json1_1CreateReportGroupInput = (input, context) => {
    return {
        ...(input.exportConfig != null && {
            exportConfig: serializeAws_json1_1ReportExportConfig(input.exportConfig, context),
        }),
        ...(input.name != null && { name: input.name }),
        ...(input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1CreateWebhookInput = (input, context) => {
    return {
        ...(input.branchFilter != null && { branchFilter: input.branchFilter }),
        ...(input.buildType != null && { buildType: input.buildType }),
        ...(input.filterGroups != null && { filterGroups: serializeAws_json1_1FilterGroups(input.filterGroups, context) }),
        ...(input.projectName != null && { projectName: input.projectName }),
    };
};
const serializeAws_json1_1DeleteBuildBatchInput = (input, context) => {
    return {
        ...(input.id != null && { id: input.id }),
    };
};
const serializeAws_json1_1DeleteProjectInput = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
    };
};
const serializeAws_json1_1DeleteReportGroupInput = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.deleteReports != null && { deleteReports: input.deleteReports }),
    };
};
const serializeAws_json1_1DeleteReportInput = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeleteResourcePolicyInput = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
    };
};
const serializeAws_json1_1DeleteSourceCredentialsInput = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
    };
};
const serializeAws_json1_1DeleteWebhookInput = (input, context) => {
    return {
        ...(input.projectName != null && { projectName: input.projectName }),
    };
};
const serializeAws_json1_1DescribeCodeCoveragesInput = (input, context) => {
    return {
        ...(input.maxLineCoveragePercentage != null && {
            maxLineCoveragePercentage: __serializeFloat(input.maxLineCoveragePercentage),
        }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.minLineCoveragePercentage != null && {
            minLineCoveragePercentage: __serializeFloat(input.minLineCoveragePercentage),
        }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.reportArn != null && { reportArn: input.reportArn }),
        ...(input.sortBy != null && { sortBy: input.sortBy }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1DescribeTestCasesInput = (input, context) => {
    return {
        ...(input.filter != null && { filter: serializeAws_json1_1TestCaseFilter(input.filter, context) }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.reportArn != null && { reportArn: input.reportArn }),
    };
};
const serializeAws_json1_1EnvironmentVariable = (input, context) => {
    return {
        ...(input.name != null && { name: input.name }),
        ...(input.type != null && { type: input.type }),
        ...(input.value != null && { value: input.value }),
    };
};
const serializeAws_json1_1EnvironmentVariables = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1EnvironmentVariable(entry, context);
    });
};
const serializeAws_json1_1FilterGroup = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1WebhookFilter(entry, context);
    });
};
const serializeAws_json1_1FilterGroups = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1FilterGroup(entry, context);
    });
};
const serializeAws_json1_1GetReportGroupTrendInput = (input, context) => {
    return {
        ...(input.numOfReports != null && { numOfReports: input.numOfReports }),
        ...(input.reportGroupArn != null && { reportGroupArn: input.reportGroupArn }),
        ...(input.trendField != null && { trendField: input.trendField }),
    };
};
const serializeAws_json1_1GetResourcePolicyInput = (input, context) => {
    return {
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
    };
};
const serializeAws_json1_1GitSubmodulesConfig = (input, context) => {
    return {
        ...(input.fetchSubmodules != null && { fetchSubmodules: input.fetchSubmodules }),
    };
};
const serializeAws_json1_1ImportSourceCredentialsInput = (input, context) => {
    return {
        ...(input.authType != null && { authType: input.authType }),
        ...(input.serverType != null && { serverType: input.serverType }),
        ...(input.shouldOverwrite != null && { shouldOverwrite: input.shouldOverwrite }),
        ...(input.token != null && { token: input.token }),
        ...(input.username != null && { username: input.username }),
    };
};
const serializeAws_json1_1InvalidateProjectCacheInput = (input, context) => {
    return {
        ...(input.projectName != null && { projectName: input.projectName }),
    };
};
const serializeAws_json1_1ListBuildBatchesForProjectInput = (input, context) => {
    return {
        ...(input.filter != null && { filter: serializeAws_json1_1BuildBatchFilter(input.filter, context) }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.projectName != null && { projectName: input.projectName }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListBuildBatchesInput = (input, context) => {
    return {
        ...(input.filter != null && { filter: serializeAws_json1_1BuildBatchFilter(input.filter, context) }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListBuildsForProjectInput = (input, context) => {
    return {
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.projectName != null && { projectName: input.projectName }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListBuildsInput = (input, context) => {
    return {
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListCuratedEnvironmentImagesInput = (input, context) => {
    return {};
};
const serializeAws_json1_1ListProjectsInput = (input, context) => {
    return {
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sortBy != null && { sortBy: input.sortBy }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListReportGroupsInput = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sortBy != null && { sortBy: input.sortBy }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListReportsForReportGroupInput = (input, context) => {
    return {
        ...(input.filter != null && { filter: serializeAws_json1_1ReportFilter(input.filter, context) }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.reportGroupArn != null && { reportGroupArn: input.reportGroupArn }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListReportsInput = (input, context) => {
    return {
        ...(input.filter != null && { filter: serializeAws_json1_1ReportFilter(input.filter, context) }),
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListSharedProjectsInput = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sortBy != null && { sortBy: input.sortBy }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListSharedReportGroupsInput = (input, context) => {
    return {
        ...(input.maxResults != null && { maxResults: input.maxResults }),
        ...(input.nextToken != null && { nextToken: input.nextToken }),
        ...(input.sortBy != null && { sortBy: input.sortBy }),
        ...(input.sortOrder != null && { sortOrder: input.sortOrder }),
    };
};
const serializeAws_json1_1ListSourceCredentialsInput = (input, context) => {
    return {};
};
const serializeAws_json1_1LogsConfig = (input, context) => {
    return {
        ...(input.cloudWatchLogs != null && {
            cloudWatchLogs: serializeAws_json1_1CloudWatchLogsConfig(input.cloudWatchLogs, context),
        }),
        ...(input.s3Logs != null && { s3Logs: serializeAws_json1_1S3LogsConfig(input.s3Logs, context) }),
    };
};
const serializeAws_json1_1ProjectArtifacts = (input, context) => {
    return {
        ...(input.artifactIdentifier != null && { artifactIdentifier: input.artifactIdentifier }),
        ...(input.bucketOwnerAccess != null && { bucketOwnerAccess: input.bucketOwnerAccess }),
        ...(input.encryptionDisabled != null && { encryptionDisabled: input.encryptionDisabled }),
        ...(input.location != null && { location: input.location }),
        ...(input.name != null && { name: input.name }),
        ...(input.namespaceType != null && { namespaceType: input.namespaceType }),
        ...(input.overrideArtifactName != null && { overrideArtifactName: input.overrideArtifactName }),
        ...(input.packaging != null && { packaging: input.packaging }),
        ...(input.path != null && { path: input.path }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ProjectArtifactsList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ProjectArtifacts(entry, context);
    });
};
const serializeAws_json1_1ProjectBuildBatchConfig = (input, context) => {
    return {
        ...(input.batchReportMode != null && { batchReportMode: input.batchReportMode }),
        ...(input.combineArtifacts != null && { combineArtifacts: input.combineArtifacts }),
        ...(input.restrictions != null && {
            restrictions: serializeAws_json1_1BatchRestrictions(input.restrictions, context),
        }),
        ...(input.serviceRole != null && { serviceRole: input.serviceRole }),
        ...(input.timeoutInMins != null && { timeoutInMins: input.timeoutInMins }),
    };
};
const serializeAws_json1_1ProjectCache = (input, context) => {
    return {
        ...(input.location != null && { location: input.location }),
        ...(input.modes != null && { modes: serializeAws_json1_1ProjectCacheModes(input.modes, context) }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ProjectCacheModes = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ProjectEnvironment = (input, context) => {
    return {
        ...(input.certificate != null && { certificate: input.certificate }),
        ...(input.computeType != null && { computeType: input.computeType }),
        ...(input.environmentVariables != null && {
            environmentVariables: serializeAws_json1_1EnvironmentVariables(input.environmentVariables, context),
        }),
        ...(input.image != null && { image: input.image }),
        ...(input.imagePullCredentialsType != null && { imagePullCredentialsType: input.imagePullCredentialsType }),
        ...(input.privilegedMode != null && { privilegedMode: input.privilegedMode }),
        ...(input.registryCredential != null && {
            registryCredential: serializeAws_json1_1RegistryCredential(input.registryCredential, context),
        }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ProjectFileSystemLocation = (input, context) => {
    return {
        ...(input.identifier != null && { identifier: input.identifier }),
        ...(input.location != null && { location: input.location }),
        ...(input.mountOptions != null && { mountOptions: input.mountOptions }),
        ...(input.mountPoint != null && { mountPoint: input.mountPoint }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ProjectFileSystemLocations = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ProjectFileSystemLocation(entry, context);
    });
};
const serializeAws_json1_1ProjectNames = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ProjectSecondarySourceVersions = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ProjectSourceVersion(entry, context);
    });
};
const serializeAws_json1_1ProjectSource = (input, context) => {
    return {
        ...(input.auth != null && { auth: serializeAws_json1_1SourceAuth(input.auth, context) }),
        ...(input.buildStatusConfig != null && {
            buildStatusConfig: serializeAws_json1_1BuildStatusConfig(input.buildStatusConfig, context),
        }),
        ...(input.buildspec != null && { buildspec: input.buildspec }),
        ...(input.gitCloneDepth != null && { gitCloneDepth: input.gitCloneDepth }),
        ...(input.gitSubmodulesConfig != null && {
            gitSubmodulesConfig: serializeAws_json1_1GitSubmodulesConfig(input.gitSubmodulesConfig, context),
        }),
        ...(input.insecureSsl != null && { insecureSsl: input.insecureSsl }),
        ...(input.location != null && { location: input.location }),
        ...(input.reportBuildStatus != null && { reportBuildStatus: input.reportBuildStatus }),
        ...(input.sourceIdentifier != null && { sourceIdentifier: input.sourceIdentifier }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1ProjectSources = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1ProjectSource(entry, context);
    });
};
const serializeAws_json1_1ProjectSourceVersion = (input, context) => {
    return {
        ...(input.sourceIdentifier != null && { sourceIdentifier: input.sourceIdentifier }),
        ...(input.sourceVersion != null && { sourceVersion: input.sourceVersion }),
    };
};
const serializeAws_json1_1PutResourcePolicyInput = (input, context) => {
    return {
        ...(input.policy != null && { policy: input.policy }),
        ...(input.resourceArn != null && { resourceArn: input.resourceArn }),
    };
};
const serializeAws_json1_1RegistryCredential = (input, context) => {
    return {
        ...(input.credential != null && { credential: input.credential }),
        ...(input.credentialProvider != null && { credentialProvider: input.credentialProvider }),
    };
};
const serializeAws_json1_1ReportArns = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1ReportExportConfig = (input, context) => {
    return {
        ...(input.exportConfigType != null && { exportConfigType: input.exportConfigType }),
        ...(input.s3Destination != null && {
            s3Destination: serializeAws_json1_1S3ReportExportConfig(input.s3Destination, context),
        }),
    };
};
const serializeAws_json1_1ReportFilter = (input, context) => {
    return {
        ...(input.status != null && { status: input.status }),
    };
};
const serializeAws_json1_1ReportGroupArns = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1RetryBuildBatchInput = (input, context) => {
    return {
        ...(input.id != null && { id: input.id }),
        ...(input.idempotencyToken != null && { idempotencyToken: input.idempotencyToken }),
        ...(input.retryType != null && { retryType: input.retryType }),
    };
};
const serializeAws_json1_1RetryBuildInput = (input, context) => {
    return {
        ...(input.id != null && { id: input.id }),
        ...(input.idempotencyToken != null && { idempotencyToken: input.idempotencyToken }),
    };
};
const serializeAws_json1_1S3LogsConfig = (input, context) => {
    return {
        ...(input.bucketOwnerAccess != null && { bucketOwnerAccess: input.bucketOwnerAccess }),
        ...(input.encryptionDisabled != null && { encryptionDisabled: input.encryptionDisabled }),
        ...(input.location != null && { location: input.location }),
        ...(input.status != null && { status: input.status }),
    };
};
const serializeAws_json1_1S3ReportExportConfig = (input, context) => {
    return {
        ...(input.bucket != null && { bucket: input.bucket }),
        ...(input.bucketOwner != null && { bucketOwner: input.bucketOwner }),
        ...(input.encryptionDisabled != null && { encryptionDisabled: input.encryptionDisabled }),
        ...(input.encryptionKey != null && { encryptionKey: input.encryptionKey }),
        ...(input.packaging != null && { packaging: input.packaging }),
        ...(input.path != null && { path: input.path }),
    };
};
const serializeAws_json1_1SecurityGroupIds = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1SourceAuth = (input, context) => {
    return {
        ...(input.resource != null && { resource: input.resource }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_json1_1StartBuildBatchInput = (input, context) => {
    return {
        ...(input.artifactsOverride != null && {
            artifactsOverride: serializeAws_json1_1ProjectArtifacts(input.artifactsOverride, context),
        }),
        ...(input.buildBatchConfigOverride != null && {
            buildBatchConfigOverride: serializeAws_json1_1ProjectBuildBatchConfig(input.buildBatchConfigOverride, context),
        }),
        ...(input.buildTimeoutInMinutesOverride != null && {
            buildTimeoutInMinutesOverride: input.buildTimeoutInMinutesOverride,
        }),
        ...(input.buildspecOverride != null && { buildspecOverride: input.buildspecOverride }),
        ...(input.cacheOverride != null && {
            cacheOverride: serializeAws_json1_1ProjectCache(input.cacheOverride, context),
        }),
        ...(input.certificateOverride != null && { certificateOverride: input.certificateOverride }),
        ...(input.computeTypeOverride != null && { computeTypeOverride: input.computeTypeOverride }),
        ...(input.debugSessionEnabled != null && { debugSessionEnabled: input.debugSessionEnabled }),
        ...(input.encryptionKeyOverride != null && { encryptionKeyOverride: input.encryptionKeyOverride }),
        ...(input.environmentTypeOverride != null && { environmentTypeOverride: input.environmentTypeOverride }),
        ...(input.environmentVariablesOverride != null && {
            environmentVariablesOverride: serializeAws_json1_1EnvironmentVariables(input.environmentVariablesOverride, context),
        }),
        ...(input.gitCloneDepthOverride != null && { gitCloneDepthOverride: input.gitCloneDepthOverride }),
        ...(input.gitSubmodulesConfigOverride != null && {
            gitSubmodulesConfigOverride: serializeAws_json1_1GitSubmodulesConfig(input.gitSubmodulesConfigOverride, context),
        }),
        ...(input.idempotencyToken != null && { idempotencyToken: input.idempotencyToken }),
        ...(input.imageOverride != null && { imageOverride: input.imageOverride }),
        ...(input.imagePullCredentialsTypeOverride != null && {
            imagePullCredentialsTypeOverride: input.imagePullCredentialsTypeOverride,
        }),
        ...(input.insecureSslOverride != null && { insecureSslOverride: input.insecureSslOverride }),
        ...(input.logsConfigOverride != null && {
            logsConfigOverride: serializeAws_json1_1LogsConfig(input.logsConfigOverride, context),
        }),
        ...(input.privilegedModeOverride != null && { privilegedModeOverride: input.privilegedModeOverride }),
        ...(input.projectName != null && { projectName: input.projectName }),
        ...(input.queuedTimeoutInMinutesOverride != null && {
            queuedTimeoutInMinutesOverride: input.queuedTimeoutInMinutesOverride,
        }),
        ...(input.registryCredentialOverride != null && {
            registryCredentialOverride: serializeAws_json1_1RegistryCredential(input.registryCredentialOverride, context),
        }),
        ...(input.reportBuildBatchStatusOverride != null && {
            reportBuildBatchStatusOverride: input.reportBuildBatchStatusOverride,
        }),
        ...(input.secondaryArtifactsOverride != null && {
            secondaryArtifactsOverride: serializeAws_json1_1ProjectArtifactsList(input.secondaryArtifactsOverride, context),
        }),
        ...(input.secondarySourcesOverride != null && {
            secondarySourcesOverride: serializeAws_json1_1ProjectSources(input.secondarySourcesOverride, context),
        }),
        ...(input.secondarySourcesVersionOverride != null && {
            secondarySourcesVersionOverride: serializeAws_json1_1ProjectSecondarySourceVersions(input.secondarySourcesVersionOverride, context),
        }),
        ...(input.serviceRoleOverride != null && { serviceRoleOverride: input.serviceRoleOverride }),
        ...(input.sourceAuthOverride != null && {
            sourceAuthOverride: serializeAws_json1_1SourceAuth(input.sourceAuthOverride, context),
        }),
        ...(input.sourceLocationOverride != null && { sourceLocationOverride: input.sourceLocationOverride }),
        ...(input.sourceTypeOverride != null && { sourceTypeOverride: input.sourceTypeOverride }),
        ...(input.sourceVersion != null && { sourceVersion: input.sourceVersion }),
    };
};
const serializeAws_json1_1StartBuildInput = (input, context) => {
    return {
        ...(input.artifactsOverride != null && {
            artifactsOverride: serializeAws_json1_1ProjectArtifacts(input.artifactsOverride, context),
        }),
        ...(input.buildStatusConfigOverride != null && {
            buildStatusConfigOverride: serializeAws_json1_1BuildStatusConfig(input.buildStatusConfigOverride, context),
        }),
        ...(input.buildspecOverride != null && { buildspecOverride: input.buildspecOverride }),
        ...(input.cacheOverride != null && {
            cacheOverride: serializeAws_json1_1ProjectCache(input.cacheOverride, context),
        }),
        ...(input.certificateOverride != null && { certificateOverride: input.certificateOverride }),
        ...(input.computeTypeOverride != null && { computeTypeOverride: input.computeTypeOverride }),
        ...(input.debugSessionEnabled != null && { debugSessionEnabled: input.debugSessionEnabled }),
        ...(input.encryptionKeyOverride != null && { encryptionKeyOverride: input.encryptionKeyOverride }),
        ...(input.environmentTypeOverride != null && { environmentTypeOverride: input.environmentTypeOverride }),
        ...(input.environmentVariablesOverride != null && {
            environmentVariablesOverride: serializeAws_json1_1EnvironmentVariables(input.environmentVariablesOverride, context),
        }),
        ...(input.gitCloneDepthOverride != null && { gitCloneDepthOverride: input.gitCloneDepthOverride }),
        ...(input.gitSubmodulesConfigOverride != null && {
            gitSubmodulesConfigOverride: serializeAws_json1_1GitSubmodulesConfig(input.gitSubmodulesConfigOverride, context),
        }),
        ...(input.idempotencyToken != null && { idempotencyToken: input.idempotencyToken }),
        ...(input.imageOverride != null && { imageOverride: input.imageOverride }),
        ...(input.imagePullCredentialsTypeOverride != null && {
            imagePullCredentialsTypeOverride: input.imagePullCredentialsTypeOverride,
        }),
        ...(input.insecureSslOverride != null && { insecureSslOverride: input.insecureSslOverride }),
        ...(input.logsConfigOverride != null && {
            logsConfigOverride: serializeAws_json1_1LogsConfig(input.logsConfigOverride, context),
        }),
        ...(input.privilegedModeOverride != null && { privilegedModeOverride: input.privilegedModeOverride }),
        ...(input.projectName != null && { projectName: input.projectName }),
        ...(input.queuedTimeoutInMinutesOverride != null && {
            queuedTimeoutInMinutesOverride: input.queuedTimeoutInMinutesOverride,
        }),
        ...(input.registryCredentialOverride != null && {
            registryCredentialOverride: serializeAws_json1_1RegistryCredential(input.registryCredentialOverride, context),
        }),
        ...(input.reportBuildStatusOverride != null && { reportBuildStatusOverride: input.reportBuildStatusOverride }),
        ...(input.secondaryArtifactsOverride != null && {
            secondaryArtifactsOverride: serializeAws_json1_1ProjectArtifactsList(input.secondaryArtifactsOverride, context),
        }),
        ...(input.secondarySourcesOverride != null && {
            secondarySourcesOverride: serializeAws_json1_1ProjectSources(input.secondarySourcesOverride, context),
        }),
        ...(input.secondarySourcesVersionOverride != null && {
            secondarySourcesVersionOverride: serializeAws_json1_1ProjectSecondarySourceVersions(input.secondarySourcesVersionOverride, context),
        }),
        ...(input.serviceRoleOverride != null && { serviceRoleOverride: input.serviceRoleOverride }),
        ...(input.sourceAuthOverride != null && {
            sourceAuthOverride: serializeAws_json1_1SourceAuth(input.sourceAuthOverride, context),
        }),
        ...(input.sourceLocationOverride != null && { sourceLocationOverride: input.sourceLocationOverride }),
        ...(input.sourceTypeOverride != null && { sourceTypeOverride: input.sourceTypeOverride }),
        ...(input.sourceVersion != null && { sourceVersion: input.sourceVersion }),
        ...(input.timeoutInMinutesOverride != null && { timeoutInMinutesOverride: input.timeoutInMinutesOverride }),
    };
};
const serializeAws_json1_1StopBuildBatchInput = (input, context) => {
    return {
        ...(input.id != null && { id: input.id }),
    };
};
const serializeAws_json1_1StopBuildInput = (input, context) => {
    return {
        ...(input.id != null && { id: input.id }),
    };
};
const serializeAws_json1_1Subnets = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_json1_1Tag = (input, context) => {
    return {
        ...(input.key != null && { key: input.key }),
        ...(input.value != null && { value: input.value }),
    };
};
const serializeAws_json1_1TagList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_json1_1Tag(entry, context);
    });
};
const serializeAws_json1_1TestCaseFilter = (input, context) => {
    return {
        ...(input.keyword != null && { keyword: input.keyword }),
        ...(input.status != null && { status: input.status }),
    };
};
const serializeAws_json1_1UpdateProjectInput = (input, context) => {
    return {
        ...(input.artifacts != null && { artifacts: serializeAws_json1_1ProjectArtifacts(input.artifacts, context) }),
        ...(input.badgeEnabled != null && { badgeEnabled: input.badgeEnabled }),
        ...(input.buildBatchConfig != null && {
            buildBatchConfig: serializeAws_json1_1ProjectBuildBatchConfig(input.buildBatchConfig, context),
        }),
        ...(input.cache != null && { cache: serializeAws_json1_1ProjectCache(input.cache, context) }),
        ...(input.concurrentBuildLimit != null && { concurrentBuildLimit: input.concurrentBuildLimit }),
        ...(input.description != null && { description: input.description }),
        ...(input.encryptionKey != null && { encryptionKey: input.encryptionKey }),
        ...(input.environment != null && {
            environment: serializeAws_json1_1ProjectEnvironment(input.environment, context),
        }),
        ...(input.fileSystemLocations != null && {
            fileSystemLocations: serializeAws_json1_1ProjectFileSystemLocations(input.fileSystemLocations, context),
        }),
        ...(input.logsConfig != null && { logsConfig: serializeAws_json1_1LogsConfig(input.logsConfig, context) }),
        ...(input.name != null && { name: input.name }),
        ...(input.queuedTimeoutInMinutes != null && { queuedTimeoutInMinutes: input.queuedTimeoutInMinutes }),
        ...(input.secondaryArtifacts != null && {
            secondaryArtifacts: serializeAws_json1_1ProjectArtifactsList(input.secondaryArtifacts, context),
        }),
        ...(input.secondarySourceVersions != null && {
            secondarySourceVersions: serializeAws_json1_1ProjectSecondarySourceVersions(input.secondarySourceVersions, context),
        }),
        ...(input.secondarySources != null && {
            secondarySources: serializeAws_json1_1ProjectSources(input.secondarySources, context),
        }),
        ...(input.serviceRole != null && { serviceRole: input.serviceRole }),
        ...(input.source != null && { source: serializeAws_json1_1ProjectSource(input.source, context) }),
        ...(input.sourceVersion != null && { sourceVersion: input.sourceVersion }),
        ...(input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }),
        ...(input.timeoutInMinutes != null && { timeoutInMinutes: input.timeoutInMinutes }),
        ...(input.vpcConfig != null && { vpcConfig: serializeAws_json1_1VpcConfig(input.vpcConfig, context) }),
    };
};
const serializeAws_json1_1UpdateProjectVisibilityInput = (input, context) => {
    return {
        ...(input.projectArn != null && { projectArn: input.projectArn }),
        ...(input.projectVisibility != null && { projectVisibility: input.projectVisibility }),
        ...(input.resourceAccessRole != null && { resourceAccessRole: input.resourceAccessRole }),
    };
};
const serializeAws_json1_1UpdateReportGroupInput = (input, context) => {
    return {
        ...(input.arn != null && { arn: input.arn }),
        ...(input.exportConfig != null && {
            exportConfig: serializeAws_json1_1ReportExportConfig(input.exportConfig, context),
        }),
        ...(input.tags != null && { tags: serializeAws_json1_1TagList(input.tags, context) }),
    };
};
const serializeAws_json1_1UpdateWebhookInput = (input, context) => {
    return {
        ...(input.branchFilter != null && { branchFilter: input.branchFilter }),
        ...(input.buildType != null && { buildType: input.buildType }),
        ...(input.filterGroups != null && { filterGroups: serializeAws_json1_1FilterGroups(input.filterGroups, context) }),
        ...(input.projectName != null && { projectName: input.projectName }),
        ...(input.rotateSecret != null && { rotateSecret: input.rotateSecret }),
    };
};
const serializeAws_json1_1VpcConfig = (input, context) => {
    return {
        ...(input.securityGroupIds != null && {
            securityGroupIds: serializeAws_json1_1SecurityGroupIds(input.securityGroupIds, context),
        }),
        ...(input.subnets != null && { subnets: serializeAws_json1_1Subnets(input.subnets, context) }),
        ...(input.vpcId != null && { vpcId: input.vpcId }),
    };
};
const serializeAws_json1_1WebhookFilter = (input, context) => {
    return {
        ...(input.excludeMatchedPattern != null && { excludeMatchedPattern: input.excludeMatchedPattern }),
        ...(input.pattern != null && { pattern: input.pattern }),
        ...(input.type != null && { type: input.type }),
    };
};
const deserializeAws_json1_1AccountLimitExceededException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1BatchDeleteBuildsOutput = (output, context) => {
    return {
        buildsDeleted: output.buildsDeleted != null ? deserializeAws_json1_1BuildIds(output.buildsDeleted, context) : undefined,
        buildsNotDeleted: output.buildsNotDeleted != null
            ? deserializeAws_json1_1BuildsNotDeleted(output.buildsNotDeleted, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetBuildBatchesOutput = (output, context) => {
    return {
        buildBatches: output.buildBatches != null ? deserializeAws_json1_1BuildBatches(output.buildBatches, context) : undefined,
        buildBatchesNotFound: output.buildBatchesNotFound != null
            ? deserializeAws_json1_1BuildBatchIds(output.buildBatchesNotFound, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetBuildsOutput = (output, context) => {
    return {
        builds: output.builds != null ? deserializeAws_json1_1Builds(output.builds, context) : undefined,
        buildsNotFound: output.buildsNotFound != null ? deserializeAws_json1_1BuildIds(output.buildsNotFound, context) : undefined,
    };
};
const deserializeAws_json1_1BatchGetProjectsOutput = (output, context) => {
    return {
        projects: output.projects != null ? deserializeAws_json1_1Projects(output.projects, context) : undefined,
        projectsNotFound: output.projectsNotFound != null
            ? deserializeAws_json1_1ProjectNames(output.projectsNotFound, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetReportGroupsOutput = (output, context) => {
    return {
        reportGroups: output.reportGroups != null ? deserializeAws_json1_1ReportGroups(output.reportGroups, context) : undefined,
        reportGroupsNotFound: output.reportGroupsNotFound != null
            ? deserializeAws_json1_1ReportGroupArns(output.reportGroupsNotFound, context)
            : undefined,
    };
};
const deserializeAws_json1_1BatchGetReportsOutput = (output, context) => {
    return {
        reports: output.reports != null ? deserializeAws_json1_1Reports(output.reports, context) : undefined,
        reportsNotFound: output.reportsNotFound != null ? deserializeAws_json1_1ReportArns(output.reportsNotFound, context) : undefined,
    };
};
const deserializeAws_json1_1BatchRestrictions = (output, context) => {
    return {
        computeTypesAllowed: output.computeTypesAllowed != null
            ? deserializeAws_json1_1ComputeTypesAllowed(output.computeTypesAllowed, context)
            : undefined,
        maximumBuildsAllowed: __expectInt32(output.maximumBuildsAllowed),
    };
};
const deserializeAws_json1_1Build = (output, context) => {
    return {
        arn: __expectString(output.arn),
        artifacts: output.artifacts != null ? deserializeAws_json1_1BuildArtifacts(output.artifacts, context) : undefined,
        buildBatchArn: __expectString(output.buildBatchArn),
        buildComplete: __expectBoolean(output.buildComplete),
        buildNumber: __expectLong(output.buildNumber),
        buildStatus: __expectString(output.buildStatus),
        cache: output.cache != null ? deserializeAws_json1_1ProjectCache(output.cache, context) : undefined,
        currentPhase: __expectString(output.currentPhase),
        debugSession: output.debugSession != null ? deserializeAws_json1_1DebugSession(output.debugSession, context) : undefined,
        encryptionKey: __expectString(output.encryptionKey),
        endTime: output.endTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.endTime))) : undefined,
        environment: output.environment != null ? deserializeAws_json1_1ProjectEnvironment(output.environment, context) : undefined,
        exportedEnvironmentVariables: output.exportedEnvironmentVariables != null
            ? deserializeAws_json1_1ExportedEnvironmentVariables(output.exportedEnvironmentVariables, context)
            : undefined,
        fileSystemLocations: output.fileSystemLocations != null
            ? deserializeAws_json1_1ProjectFileSystemLocations(output.fileSystemLocations, context)
            : undefined,
        id: __expectString(output.id),
        initiator: __expectString(output.initiator),
        logs: output.logs != null ? deserializeAws_json1_1LogsLocation(output.logs, context) : undefined,
        networkInterface: output.networkInterface != null
            ? deserializeAws_json1_1NetworkInterface(output.networkInterface, context)
            : undefined,
        phases: output.phases != null ? deserializeAws_json1_1BuildPhases(output.phases, context) : undefined,
        projectName: __expectString(output.projectName),
        queuedTimeoutInMinutes: __expectInt32(output.queuedTimeoutInMinutes),
        reportArns: output.reportArns != null ? deserializeAws_json1_1BuildReportArns(output.reportArns, context) : undefined,
        resolvedSourceVersion: __expectString(output.resolvedSourceVersion),
        secondaryArtifacts: output.secondaryArtifacts != null
            ? deserializeAws_json1_1BuildArtifactsList(output.secondaryArtifacts, context)
            : undefined,
        secondarySourceVersions: output.secondarySourceVersions != null
            ? deserializeAws_json1_1ProjectSecondarySourceVersions(output.secondarySourceVersions, context)
            : undefined,
        secondarySources: output.secondarySources != null
            ? deserializeAws_json1_1ProjectSources(output.secondarySources, context)
            : undefined,
        serviceRole: __expectString(output.serviceRole),
        source: output.source != null ? deserializeAws_json1_1ProjectSource(output.source, context) : undefined,
        sourceVersion: __expectString(output.sourceVersion),
        startTime: output.startTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.startTime))) : undefined,
        timeoutInMinutes: __expectInt32(output.timeoutInMinutes),
        vpcConfig: output.vpcConfig != null ? deserializeAws_json1_1VpcConfig(output.vpcConfig, context) : undefined,
    };
};
const deserializeAws_json1_1BuildArtifacts = (output, context) => {
    return {
        artifactIdentifier: __expectString(output.artifactIdentifier),
        bucketOwnerAccess: __expectString(output.bucketOwnerAccess),
        encryptionDisabled: __expectBoolean(output.encryptionDisabled),
        location: __expectString(output.location),
        md5sum: __expectString(output.md5sum),
        overrideArtifactName: __expectBoolean(output.overrideArtifactName),
        sha256sum: __expectString(output.sha256sum),
    };
};
const deserializeAws_json1_1BuildArtifactsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BuildArtifacts(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BuildBatch = (output, context) => {
    return {
        arn: __expectString(output.arn),
        artifacts: output.artifacts != null ? deserializeAws_json1_1BuildArtifacts(output.artifacts, context) : undefined,
        buildBatchConfig: output.buildBatchConfig != null
            ? deserializeAws_json1_1ProjectBuildBatchConfig(output.buildBatchConfig, context)
            : undefined,
        buildBatchNumber: __expectLong(output.buildBatchNumber),
        buildBatchStatus: __expectString(output.buildBatchStatus),
        buildGroups: output.buildGroups != null ? deserializeAws_json1_1BuildGroups(output.buildGroups, context) : undefined,
        buildTimeoutInMinutes: __expectInt32(output.buildTimeoutInMinutes),
        cache: output.cache != null ? deserializeAws_json1_1ProjectCache(output.cache, context) : undefined,
        complete: __expectBoolean(output.complete),
        currentPhase: __expectString(output.currentPhase),
        debugSessionEnabled: __expectBoolean(output.debugSessionEnabled),
        encryptionKey: __expectString(output.encryptionKey),
        endTime: output.endTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.endTime))) : undefined,
        environment: output.environment != null ? deserializeAws_json1_1ProjectEnvironment(output.environment, context) : undefined,
        fileSystemLocations: output.fileSystemLocations != null
            ? deserializeAws_json1_1ProjectFileSystemLocations(output.fileSystemLocations, context)
            : undefined,
        id: __expectString(output.id),
        initiator: __expectString(output.initiator),
        logConfig: output.logConfig != null ? deserializeAws_json1_1LogsConfig(output.logConfig, context) : undefined,
        phases: output.phases != null ? deserializeAws_json1_1BuildBatchPhases(output.phases, context) : undefined,
        projectName: __expectString(output.projectName),
        queuedTimeoutInMinutes: __expectInt32(output.queuedTimeoutInMinutes),
        resolvedSourceVersion: __expectString(output.resolvedSourceVersion),
        secondaryArtifacts: output.secondaryArtifacts != null
            ? deserializeAws_json1_1BuildArtifactsList(output.secondaryArtifacts, context)
            : undefined,
        secondarySourceVersions: output.secondarySourceVersions != null
            ? deserializeAws_json1_1ProjectSecondarySourceVersions(output.secondarySourceVersions, context)
            : undefined,
        secondarySources: output.secondarySources != null
            ? deserializeAws_json1_1ProjectSources(output.secondarySources, context)
            : undefined,
        serviceRole: __expectString(output.serviceRole),
        source: output.source != null ? deserializeAws_json1_1ProjectSource(output.source, context) : undefined,
        sourceVersion: __expectString(output.sourceVersion),
        startTime: output.startTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.startTime))) : undefined,
        vpcConfig: output.vpcConfig != null ? deserializeAws_json1_1VpcConfig(output.vpcConfig, context) : undefined,
    };
};
const deserializeAws_json1_1BuildBatches = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BuildBatch(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BuildBatchIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1BuildBatchPhase = (output, context) => {
    return {
        contexts: output.contexts != null ? deserializeAws_json1_1PhaseContexts(output.contexts, context) : undefined,
        durationInSeconds: __expectLong(output.durationInSeconds),
        endTime: output.endTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.endTime))) : undefined,
        phaseStatus: __expectString(output.phaseStatus),
        phaseType: __expectString(output.phaseType),
        startTime: output.startTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.startTime))) : undefined,
    };
};
const deserializeAws_json1_1BuildBatchPhases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BuildBatchPhase(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BuildGroup = (output, context) => {
    return {
        currentBuildSummary: output.currentBuildSummary != null
            ? deserializeAws_json1_1BuildSummary(output.currentBuildSummary, context)
            : undefined,
        dependsOn: output.dependsOn != null ? deserializeAws_json1_1Identifiers(output.dependsOn, context) : undefined,
        identifier: __expectString(output.identifier),
        ignoreFailure: __expectBoolean(output.ignoreFailure),
        priorBuildSummaryList: output.priorBuildSummaryList != null
            ? deserializeAws_json1_1BuildSummaries(output.priorBuildSummaryList, context)
            : undefined,
    };
};
const deserializeAws_json1_1BuildGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BuildGroup(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BuildIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1BuildNotDeleted = (output, context) => {
    return {
        id: __expectString(output.id),
        statusCode: __expectString(output.statusCode),
    };
};
const deserializeAws_json1_1BuildPhase = (output, context) => {
    return {
        contexts: output.contexts != null ? deserializeAws_json1_1PhaseContexts(output.contexts, context) : undefined,
        durationInSeconds: __expectLong(output.durationInSeconds),
        endTime: output.endTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.endTime))) : undefined,
        phaseStatus: __expectString(output.phaseStatus),
        phaseType: __expectString(output.phaseType),
        startTime: output.startTime != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.startTime))) : undefined,
    };
};
const deserializeAws_json1_1BuildPhases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BuildPhase(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BuildReportArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Builds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Build(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BuildsNotDeleted = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BuildNotDeleted(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BuildStatusConfig = (output, context) => {
    return {
        context: __expectString(output.context),
        targetUrl: __expectString(output.targetUrl),
    };
};
const deserializeAws_json1_1BuildSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1BuildSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1BuildSummary = (output, context) => {
    return {
        arn: __expectString(output.arn),
        buildStatus: __expectString(output.buildStatus),
        primaryArtifact: output.primaryArtifact != null
            ? deserializeAws_json1_1ResolvedArtifact(output.primaryArtifact, context)
            : undefined,
        requestedOn: output.requestedOn != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.requestedOn)))
            : undefined,
        secondaryArtifacts: output.secondaryArtifacts != null
            ? deserializeAws_json1_1ResolvedSecondaryArtifacts(output.secondaryArtifacts, context)
            : undefined,
    };
};
const deserializeAws_json1_1CloudWatchLogsConfig = (output, context) => {
    return {
        groupName: __expectString(output.groupName),
        status: __expectString(output.status),
        streamName: __expectString(output.streamName),
    };
};
const deserializeAws_json1_1CodeCoverage = (output, context) => {
    return {
        branchCoveragePercentage: __limitedParseDouble(output.branchCoveragePercentage),
        branchesCovered: __expectInt32(output.branchesCovered),
        branchesMissed: __expectInt32(output.branchesMissed),
        expired: output.expired != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.expired))) : undefined,
        filePath: __expectString(output.filePath),
        id: __expectString(output.id),
        lineCoveragePercentage: __limitedParseDouble(output.lineCoveragePercentage),
        linesCovered: __expectInt32(output.linesCovered),
        linesMissed: __expectInt32(output.linesMissed),
        reportARN: __expectString(output.reportARN),
    };
};
const deserializeAws_json1_1CodeCoverageReportSummary = (output, context) => {
    return {
        branchCoveragePercentage: __limitedParseDouble(output.branchCoveragePercentage),
        branchesCovered: __expectInt32(output.branchesCovered),
        branchesMissed: __expectInt32(output.branchesMissed),
        lineCoveragePercentage: __limitedParseDouble(output.lineCoveragePercentage),
        linesCovered: __expectInt32(output.linesCovered),
        linesMissed: __expectInt32(output.linesMissed),
    };
};
const deserializeAws_json1_1CodeCoverages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1CodeCoverage(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ComputeTypesAllowed = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1CreateProjectOutput = (output, context) => {
    return {
        project: output.project != null ? deserializeAws_json1_1Project(output.project, context) : undefined,
    };
};
const deserializeAws_json1_1CreateReportGroupOutput = (output, context) => {
    return {
        reportGroup: output.reportGroup != null ? deserializeAws_json1_1ReportGroup(output.reportGroup, context) : undefined,
    };
};
const deserializeAws_json1_1CreateWebhookOutput = (output, context) => {
    return {
        webhook: output.webhook != null ? deserializeAws_json1_1Webhook(output.webhook, context) : undefined,
    };
};
const deserializeAws_json1_1DebugSession = (output, context) => {
    return {
        sessionEnabled: __expectBoolean(output.sessionEnabled),
        sessionTarget: __expectString(output.sessionTarget),
    };
};
const deserializeAws_json1_1DeleteBuildBatchOutput = (output, context) => {
    return {
        buildsDeleted: output.buildsDeleted != null ? deserializeAws_json1_1BuildIds(output.buildsDeleted, context) : undefined,
        buildsNotDeleted: output.buildsNotDeleted != null
            ? deserializeAws_json1_1BuildsNotDeleted(output.buildsNotDeleted, context)
            : undefined,
        statusCode: __expectString(output.statusCode),
    };
};
const deserializeAws_json1_1DeleteProjectOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteReportGroupOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteReportOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteResourcePolicyOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DeleteSourceCredentialsOutput = (output, context) => {
    return {
        arn: __expectString(output.arn),
    };
};
const deserializeAws_json1_1DeleteWebhookOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1DescribeCodeCoveragesOutput = (output, context) => {
    return {
        codeCoverages: output.codeCoverages != null ? deserializeAws_json1_1CodeCoverages(output.codeCoverages, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1DescribeTestCasesOutput = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        testCases: output.testCases != null ? deserializeAws_json1_1TestCases(output.testCases, context) : undefined,
    };
};
const deserializeAws_json1_1EnvironmentImage = (output, context) => {
    return {
        description: __expectString(output.description),
        name: __expectString(output.name),
        versions: output.versions != null ? deserializeAws_json1_1ImageVersions(output.versions, context) : undefined,
    };
};
const deserializeAws_json1_1EnvironmentImages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EnvironmentImage(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1EnvironmentLanguage = (output, context) => {
    return {
        images: output.images != null ? deserializeAws_json1_1EnvironmentImages(output.images, context) : undefined,
        language: __expectString(output.language),
    };
};
const deserializeAws_json1_1EnvironmentLanguages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EnvironmentLanguage(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1EnvironmentPlatform = (output, context) => {
    return {
        languages: output.languages != null ? deserializeAws_json1_1EnvironmentLanguages(output.languages, context) : undefined,
        platform: __expectString(output.platform),
    };
};
const deserializeAws_json1_1EnvironmentPlatforms = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EnvironmentPlatform(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1EnvironmentVariable = (output, context) => {
    return {
        name: __expectString(output.name),
        type: __expectString(output.type),
        value: __expectString(output.value),
    };
};
const deserializeAws_json1_1EnvironmentVariables = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1EnvironmentVariable(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ExportedEnvironmentVariable = (output, context) => {
    return {
        name: __expectString(output.name),
        value: __expectString(output.value),
    };
};
const deserializeAws_json1_1ExportedEnvironmentVariables = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ExportedEnvironmentVariable(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FilterGroup = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1WebhookFilter(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1FilterGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1FilterGroup(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1GetReportGroupTrendOutput = (output, context) => {
    return {
        rawData: output.rawData != null ? deserializeAws_json1_1ReportGroupTrendRawDataList(output.rawData, context) : undefined,
        stats: output.stats != null ? deserializeAws_json1_1ReportGroupTrendStats(output.stats, context) : undefined,
    };
};
const deserializeAws_json1_1GetResourcePolicyOutput = (output, context) => {
    return {
        policy: __expectString(output.policy),
    };
};
const deserializeAws_json1_1GitSubmodulesConfig = (output, context) => {
    return {
        fetchSubmodules: __expectBoolean(output.fetchSubmodules),
    };
};
const deserializeAws_json1_1Identifiers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ImageVersions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ImportSourceCredentialsOutput = (output, context) => {
    return {
        arn: __expectString(output.arn),
    };
};
const deserializeAws_json1_1InvalidateProjectCacheOutput = (output, context) => {
    return {};
};
const deserializeAws_json1_1InvalidInputException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ListBuildBatchesForProjectOutput = (output, context) => {
    return {
        ids: output.ids != null ? deserializeAws_json1_1BuildBatchIds(output.ids, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListBuildBatchesOutput = (output, context) => {
    return {
        ids: output.ids != null ? deserializeAws_json1_1BuildBatchIds(output.ids, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListBuildsForProjectOutput = (output, context) => {
    return {
        ids: output.ids != null ? deserializeAws_json1_1BuildIds(output.ids, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListBuildsOutput = (output, context) => {
    return {
        ids: output.ids != null ? deserializeAws_json1_1BuildIds(output.ids, context) : undefined,
        nextToken: __expectString(output.nextToken),
    };
};
const deserializeAws_json1_1ListCuratedEnvironmentImagesOutput = (output, context) => {
    return {
        platforms: output.platforms != null ? deserializeAws_json1_1EnvironmentPlatforms(output.platforms, context) : undefined,
    };
};
const deserializeAws_json1_1ListProjectsOutput = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        projects: output.projects != null ? deserializeAws_json1_1ProjectNames(output.projects, context) : undefined,
    };
};
const deserializeAws_json1_1ListReportGroupsOutput = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        reportGroups: output.reportGroups != null ? deserializeAws_json1_1ReportGroupArns(output.reportGroups, context) : undefined,
    };
};
const deserializeAws_json1_1ListReportsForReportGroupOutput = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        reports: output.reports != null ? deserializeAws_json1_1ReportArns(output.reports, context) : undefined,
    };
};
const deserializeAws_json1_1ListReportsOutput = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        reports: output.reports != null ? deserializeAws_json1_1ReportArns(output.reports, context) : undefined,
    };
};
const deserializeAws_json1_1ListSharedProjectsOutput = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        projects: output.projects != null ? deserializeAws_json1_1ProjectArns(output.projects, context) : undefined,
    };
};
const deserializeAws_json1_1ListSharedReportGroupsOutput = (output, context) => {
    return {
        nextToken: __expectString(output.nextToken),
        reportGroups: output.reportGroups != null ? deserializeAws_json1_1ReportGroupArns(output.reportGroups, context) : undefined,
    };
};
const deserializeAws_json1_1ListSourceCredentialsOutput = (output, context) => {
    return {
        sourceCredentialsInfos: output.sourceCredentialsInfos != null
            ? deserializeAws_json1_1SourceCredentialsInfos(output.sourceCredentialsInfos, context)
            : undefined,
    };
};
const deserializeAws_json1_1LogsConfig = (output, context) => {
    return {
        cloudWatchLogs: output.cloudWatchLogs != null
            ? deserializeAws_json1_1CloudWatchLogsConfig(output.cloudWatchLogs, context)
            : undefined,
        s3Logs: output.s3Logs != null ? deserializeAws_json1_1S3LogsConfig(output.s3Logs, context) : undefined,
    };
};
const deserializeAws_json1_1LogsLocation = (output, context) => {
    return {
        cloudWatchLogs: output.cloudWatchLogs != null
            ? deserializeAws_json1_1CloudWatchLogsConfig(output.cloudWatchLogs, context)
            : undefined,
        cloudWatchLogsArn: __expectString(output.cloudWatchLogsArn),
        deepLink: __expectString(output.deepLink),
        groupName: __expectString(output.groupName),
        s3DeepLink: __expectString(output.s3DeepLink),
        s3Logs: output.s3Logs != null ? deserializeAws_json1_1S3LogsConfig(output.s3Logs, context) : undefined,
        s3LogsArn: __expectString(output.s3LogsArn),
        streamName: __expectString(output.streamName),
    };
};
const deserializeAws_json1_1NetworkInterface = (output, context) => {
    return {
        networkInterfaceId: __expectString(output.networkInterfaceId),
        subnetId: __expectString(output.subnetId),
    };
};
const deserializeAws_json1_1OAuthProviderException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1PhaseContext = (output, context) => {
    return {
        message: __expectString(output.message),
        statusCode: __expectString(output.statusCode),
    };
};
const deserializeAws_json1_1PhaseContexts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1PhaseContext(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1Project = (output, context) => {
    return {
        arn: __expectString(output.arn),
        artifacts: output.artifacts != null ? deserializeAws_json1_1ProjectArtifacts(output.artifacts, context) : undefined,
        badge: output.badge != null ? deserializeAws_json1_1ProjectBadge(output.badge, context) : undefined,
        buildBatchConfig: output.buildBatchConfig != null
            ? deserializeAws_json1_1ProjectBuildBatchConfig(output.buildBatchConfig, context)
            : undefined,
        cache: output.cache != null ? deserializeAws_json1_1ProjectCache(output.cache, context) : undefined,
        concurrentBuildLimit: __expectInt32(output.concurrentBuildLimit),
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        description: __expectString(output.description),
        encryptionKey: __expectString(output.encryptionKey),
        environment: output.environment != null ? deserializeAws_json1_1ProjectEnvironment(output.environment, context) : undefined,
        fileSystemLocations: output.fileSystemLocations != null
            ? deserializeAws_json1_1ProjectFileSystemLocations(output.fileSystemLocations, context)
            : undefined,
        lastModified: output.lastModified != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.lastModified)))
            : undefined,
        logsConfig: output.logsConfig != null ? deserializeAws_json1_1LogsConfig(output.logsConfig, context) : undefined,
        name: __expectString(output.name),
        projectVisibility: __expectString(output.projectVisibility),
        publicProjectAlias: __expectString(output.publicProjectAlias),
        queuedTimeoutInMinutes: __expectInt32(output.queuedTimeoutInMinutes),
        resourceAccessRole: __expectString(output.resourceAccessRole),
        secondaryArtifacts: output.secondaryArtifacts != null
            ? deserializeAws_json1_1ProjectArtifactsList(output.secondaryArtifacts, context)
            : undefined,
        secondarySourceVersions: output.secondarySourceVersions != null
            ? deserializeAws_json1_1ProjectSecondarySourceVersions(output.secondarySourceVersions, context)
            : undefined,
        secondarySources: output.secondarySources != null
            ? deserializeAws_json1_1ProjectSources(output.secondarySources, context)
            : undefined,
        serviceRole: __expectString(output.serviceRole),
        source: output.source != null ? deserializeAws_json1_1ProjectSource(output.source, context) : undefined,
        sourceVersion: __expectString(output.sourceVersion),
        tags: output.tags != null ? deserializeAws_json1_1TagList(output.tags, context) : undefined,
        timeoutInMinutes: __expectInt32(output.timeoutInMinutes),
        vpcConfig: output.vpcConfig != null ? deserializeAws_json1_1VpcConfig(output.vpcConfig, context) : undefined,
        webhook: output.webhook != null ? deserializeAws_json1_1Webhook(output.webhook, context) : undefined,
    };
};
const deserializeAws_json1_1ProjectArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ProjectArtifacts = (output, context) => {
    return {
        artifactIdentifier: __expectString(output.artifactIdentifier),
        bucketOwnerAccess: __expectString(output.bucketOwnerAccess),
        encryptionDisabled: __expectBoolean(output.encryptionDisabled),
        location: __expectString(output.location),
        name: __expectString(output.name),
        namespaceType: __expectString(output.namespaceType),
        overrideArtifactName: __expectBoolean(output.overrideArtifactName),
        packaging: __expectString(output.packaging),
        path: __expectString(output.path),
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1ProjectArtifactsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProjectArtifacts(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ProjectBadge = (output, context) => {
    return {
        badgeEnabled: __expectBoolean(output.badgeEnabled),
        badgeRequestUrl: __expectString(output.badgeRequestUrl),
    };
};
const deserializeAws_json1_1ProjectBuildBatchConfig = (output, context) => {
    return {
        batchReportMode: __expectString(output.batchReportMode),
        combineArtifacts: __expectBoolean(output.combineArtifacts),
        restrictions: output.restrictions != null ? deserializeAws_json1_1BatchRestrictions(output.restrictions, context) : undefined,
        serviceRole: __expectString(output.serviceRole),
        timeoutInMins: __expectInt32(output.timeoutInMins),
    };
};
const deserializeAws_json1_1ProjectCache = (output, context) => {
    return {
        location: __expectString(output.location),
        modes: output.modes != null ? deserializeAws_json1_1ProjectCacheModes(output.modes, context) : undefined,
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1ProjectCacheModes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ProjectEnvironment = (output, context) => {
    return {
        certificate: __expectString(output.certificate),
        computeType: __expectString(output.computeType),
        environmentVariables: output.environmentVariables != null
            ? deserializeAws_json1_1EnvironmentVariables(output.environmentVariables, context)
            : undefined,
        image: __expectString(output.image),
        imagePullCredentialsType: __expectString(output.imagePullCredentialsType),
        privilegedMode: __expectBoolean(output.privilegedMode),
        registryCredential: output.registryCredential != null
            ? deserializeAws_json1_1RegistryCredential(output.registryCredential, context)
            : undefined,
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1ProjectFileSystemLocation = (output, context) => {
    return {
        identifier: __expectString(output.identifier),
        location: __expectString(output.location),
        mountOptions: __expectString(output.mountOptions),
        mountPoint: __expectString(output.mountPoint),
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1ProjectFileSystemLocations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProjectFileSystemLocation(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ProjectNames = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Projects = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Project(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ProjectSecondarySourceVersions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProjectSourceVersion(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ProjectSource = (output, context) => {
    return {
        auth: output.auth != null ? deserializeAws_json1_1SourceAuth(output.auth, context) : undefined,
        buildStatusConfig: output.buildStatusConfig != null
            ? deserializeAws_json1_1BuildStatusConfig(output.buildStatusConfig, context)
            : undefined,
        buildspec: __expectString(output.buildspec),
        gitCloneDepth: __expectInt32(output.gitCloneDepth),
        gitSubmodulesConfig: output.gitSubmodulesConfig != null
            ? deserializeAws_json1_1GitSubmodulesConfig(output.gitSubmodulesConfig, context)
            : undefined,
        insecureSsl: __expectBoolean(output.insecureSsl),
        location: __expectString(output.location),
        reportBuildStatus: __expectBoolean(output.reportBuildStatus),
        sourceIdentifier: __expectString(output.sourceIdentifier),
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1ProjectSources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ProjectSource(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ProjectSourceVersion = (output, context) => {
    return {
        sourceIdentifier: __expectString(output.sourceIdentifier),
        sourceVersion: __expectString(output.sourceVersion),
    };
};
const deserializeAws_json1_1PutResourcePolicyOutput = (output, context) => {
    return {
        resourceArn: __expectString(output.resourceArn),
    };
};
const deserializeAws_json1_1RegistryCredential = (output, context) => {
    return {
        credential: __expectString(output.credential),
        credentialProvider: __expectString(output.credentialProvider),
    };
};
const deserializeAws_json1_1Report = (output, context) => {
    return {
        arn: __expectString(output.arn),
        codeCoverageSummary: output.codeCoverageSummary != null
            ? deserializeAws_json1_1CodeCoverageReportSummary(output.codeCoverageSummary, context)
            : undefined,
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        executionId: __expectString(output.executionId),
        expired: output.expired != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.expired))) : undefined,
        exportConfig: output.exportConfig != null ? deserializeAws_json1_1ReportExportConfig(output.exportConfig, context) : undefined,
        name: __expectString(output.name),
        reportGroupArn: __expectString(output.reportGroupArn),
        status: __expectString(output.status),
        testSummary: output.testSummary != null ? deserializeAws_json1_1TestReportSummary(output.testSummary, context) : undefined,
        truncated: __expectBoolean(output.truncated),
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1ReportArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ReportExportConfig = (output, context) => {
    return {
        exportConfigType: __expectString(output.exportConfigType),
        s3Destination: output.s3Destination != null
            ? deserializeAws_json1_1S3ReportExportConfig(output.s3Destination, context)
            : undefined,
    };
};
const deserializeAws_json1_1ReportGroup = (output, context) => {
    return {
        arn: __expectString(output.arn),
        created: output.created != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.created))) : undefined,
        exportConfig: output.exportConfig != null ? deserializeAws_json1_1ReportExportConfig(output.exportConfig, context) : undefined,
        lastModified: output.lastModified != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.lastModified)))
            : undefined,
        name: __expectString(output.name),
        status: __expectString(output.status),
        tags: output.tags != null ? deserializeAws_json1_1TagList(output.tags, context) : undefined,
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1ReportGroupArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ReportGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ReportGroup(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ReportGroupTrendRawDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ReportWithRawData(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ReportGroupTrendStats = (output, context) => {
    return {
        average: __expectString(output.average),
        max: __expectString(output.max),
        min: __expectString(output.min),
    };
};
const deserializeAws_json1_1Reports = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Report(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ReportStatusCounts = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: __expectInt32(value),
        };
    }, {});
};
const deserializeAws_json1_1ReportWithRawData = (output, context) => {
    return {
        data: __expectString(output.data),
        reportArn: __expectString(output.reportArn),
    };
};
const deserializeAws_json1_1ResolvedArtifact = (output, context) => {
    return {
        identifier: __expectString(output.identifier),
        location: __expectString(output.location),
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1ResolvedSecondaryArtifacts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1ResolvedArtifact(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ResourceAlreadyExistsException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context) => {
    return {
        message: __expectString(output.message),
    };
};
const deserializeAws_json1_1RetryBuildBatchOutput = (output, context) => {
    return {
        buildBatch: output.buildBatch != null ? deserializeAws_json1_1BuildBatch(output.buildBatch, context) : undefined,
    };
};
const deserializeAws_json1_1RetryBuildOutput = (output, context) => {
    return {
        build: output.build != null ? deserializeAws_json1_1Build(output.build, context) : undefined,
    };
};
const deserializeAws_json1_1S3LogsConfig = (output, context) => {
    return {
        bucketOwnerAccess: __expectString(output.bucketOwnerAccess),
        encryptionDisabled: __expectBoolean(output.encryptionDisabled),
        location: __expectString(output.location),
        status: __expectString(output.status),
    };
};
const deserializeAws_json1_1S3ReportExportConfig = (output, context) => {
    return {
        bucket: __expectString(output.bucket),
        bucketOwner: __expectString(output.bucketOwner),
        encryptionDisabled: __expectBoolean(output.encryptionDisabled),
        encryptionKey: __expectString(output.encryptionKey),
        packaging: __expectString(output.packaging),
        path: __expectString(output.path),
    };
};
const deserializeAws_json1_1SecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SourceAuth = (output, context) => {
    return {
        resource: __expectString(output.resource),
        type: __expectString(output.type),
    };
};
const deserializeAws_json1_1SourceCredentialsInfo = (output, context) => {
    return {
        arn: __expectString(output.arn),
        authType: __expectString(output.authType),
        serverType: __expectString(output.serverType),
    };
};
const deserializeAws_json1_1SourceCredentialsInfos = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1SourceCredentialsInfo(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1StartBuildBatchOutput = (output, context) => {
    return {
        buildBatch: output.buildBatch != null ? deserializeAws_json1_1BuildBatch(output.buildBatch, context) : undefined,
    };
};
const deserializeAws_json1_1StartBuildOutput = (output, context) => {
    return {
        build: output.build != null ? deserializeAws_json1_1Build(output.build, context) : undefined,
    };
};
const deserializeAws_json1_1StopBuildBatchOutput = (output, context) => {
    return {
        buildBatch: output.buildBatch != null ? deserializeAws_json1_1BuildBatch(output.buildBatch, context) : undefined,
    };
};
const deserializeAws_json1_1StopBuildOutput = (output, context) => {
    return {
        build: output.build != null ? deserializeAws_json1_1Build(output.build, context) : undefined,
    };
};
const deserializeAws_json1_1Subnets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return __expectString(entry);
    });
    return retVal;
};
const deserializeAws_json1_1Tag = (output, context) => {
    return {
        key: __expectString(output.key),
        value: __expectString(output.value),
    };
};
const deserializeAws_json1_1TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TestCase = (output, context) => {
    return {
        durationInNanoSeconds: __expectLong(output.durationInNanoSeconds),
        expired: output.expired != null ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.expired))) : undefined,
        message: __expectString(output.message),
        name: __expectString(output.name),
        prefix: __expectString(output.prefix),
        reportArn: __expectString(output.reportArn),
        status: __expectString(output.status),
        testRawDataPath: __expectString(output.testRawDataPath),
    };
};
const deserializeAws_json1_1TestCases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_json1_1TestCase(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1TestReportSummary = (output, context) => {
    return {
        durationInNanoSeconds: __expectLong(output.durationInNanoSeconds),
        statusCounts: output.statusCounts != null ? deserializeAws_json1_1ReportStatusCounts(output.statusCounts, context) : undefined,
        total: __expectInt32(output.total),
    };
};
const deserializeAws_json1_1UpdateProjectOutput = (output, context) => {
    return {
        project: output.project != null ? deserializeAws_json1_1Project(output.project, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateProjectVisibilityOutput = (output, context) => {
    return {
        projectArn: __expectString(output.projectArn),
        projectVisibility: __expectString(output.projectVisibility),
        publicProjectAlias: __expectString(output.publicProjectAlias),
    };
};
const deserializeAws_json1_1UpdateReportGroupOutput = (output, context) => {
    return {
        reportGroup: output.reportGroup != null ? deserializeAws_json1_1ReportGroup(output.reportGroup, context) : undefined,
    };
};
const deserializeAws_json1_1UpdateWebhookOutput = (output, context) => {
    return {
        webhook: output.webhook != null ? deserializeAws_json1_1Webhook(output.webhook, context) : undefined,
    };
};
const deserializeAws_json1_1VpcConfig = (output, context) => {
    return {
        securityGroupIds: output.securityGroupIds != null
            ? deserializeAws_json1_1SecurityGroupIds(output.securityGroupIds, context)
            : undefined,
        subnets: output.subnets != null ? deserializeAws_json1_1Subnets(output.subnets, context) : undefined,
        vpcId: __expectString(output.vpcId),
    };
};
const deserializeAws_json1_1Webhook = (output, context) => {
    return {
        branchFilter: __expectString(output.branchFilter),
        buildType: __expectString(output.buildType),
        filterGroups: output.filterGroups != null ? deserializeAws_json1_1FilterGroups(output.filterGroups, context) : undefined,
        lastModifiedSecret: output.lastModifiedSecret != null
            ? __expectNonNull(__parseEpochTimestamp(__expectNumber(output.lastModifiedSecret)))
            : undefined,
        payloadUrl: __expectString(output.payloadUrl),
        secret: __expectString(output.secret),
        url: __expectString(output.url),
    };
};
const deserializeAws_json1_1WebhookFilter = (output, context) => {
    return {
        excludeMatchedPattern: __expectBoolean(output.excludeMatchedPattern),
        pattern: __expectString(output.pattern),
        type: __expectString(output.type),
    };
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
